package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"
	"fmt"

	"github.com/guisecreator/um_backend/graphql/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, name string, email string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, users []*model.UpdateUser) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, users []string) ([]string, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// NewUser is the resolver for the newUser field.
func (r *mutationResolver) NewUser(ctx context.Context, users []*model.NewUser) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: NewUser - newUser"))
}

// Signup is the resolver for the signup field.
func (r *mutationResolver) Signup(ctx context.Context, name string, email string, password string) (*model.AuthPayload, error) {
	panic(fmt.Errorf("not implemented: Signup - signup"))
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, email string, password string) (*model.AuthPayload, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context, login string) (*string, error) {
	panic(fmt.Errorf("not implemented: Logout - logout"))
}

// Validate is the resolver for the validate field.
func (r *mutationResolver) Validate(ctx context.Context) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Validate - validate"))
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context, login string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Me - me"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// AuthenticatedQuery is the resolver for the authenticatedQuery field.
func (r *queryResolver) AuthenticatedQuery(ctx context.Context) (*model.SomeType, error) {
	panic(fmt.Errorf("not implemented: AuthenticatedQuery - authenticatedQuery"))
}

// UserQuery is the resolver for the userQuery field.
func (r *queryResolver) UserQuery(ctx context.Context, id string) (*model.SomeType, error) {
	panic(fmt.Errorf("not implemented: UserQuery - userQuery"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
