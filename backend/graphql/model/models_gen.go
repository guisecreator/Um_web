// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AuthInfo struct {
	Token string `json:"Token"`
}

type AuthPayload struct {
	User *User     `json:"user"`
	Info *AuthInfo `json:"info"`
}

type NewUser struct {
	Email string `json:"email"`
	Role  Roles  `json:"role"`
}

type SomeType struct {
	ID    string `json:"id"`
	Email string `json:"email"`
	Age   *int   `json:"age,omitempty"`
}

type UpdateUser struct {
	ID    string `json:"id"`
	Email string `json:"email"`
	Role  Roles  `json:"role"`
}

type User struct {
	ID        string  `json:"id"`
	Email     string  `json:"email"`
	Password  string  `json:"password"`
	CreateAt  string  `json:"createAt"`
	UpdateAt  string  `json:"updateAt"`
	DeletedAt *string `json:"deletedAt,omitempty"`
	Role      Roles   `json:"role"`
}

type Roles string

const (
	RolesModerator Roles = "MODERATOR"
	RolesAdmin     Roles = "ADMIN"
	RolesUser      Roles = "USER"
)

var AllRoles = []Roles{
	RolesModerator,
	RolesAdmin,
	RolesUser,
}

func (e Roles) IsValid() bool {
	switch e {
	case RolesModerator, RolesAdmin, RolesUser:
		return true
	}
	return false
}

func (e Roles) String() string {
	return string(e)
}

func (e *Roles) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Roles(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Roles", str)
	}
	return nil
}

func (e Roles) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
