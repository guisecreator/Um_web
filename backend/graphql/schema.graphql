scalar DateTime

enum Roles {
    ADMIN
    USER
}

type User {
    id: ID!
		login: String!
    email: String!
		password: String!
    createAt: DateTime!
    updateAt: DateTime!
    deletedAt: DateTime
    role: Roles!
}

type Query {
	me(login: String!): User @authenticated
	users: [User!] @authenticated
	authenticatedQuery: SomeType! @authenticated
	userQuery(id: ID!): SomeType! @isUser(idArg: "id")
}

type SomeType {
  id: ID!
  name: String!
  age: Int
  email: String
}

directive @CheckAuthorization(role: Roles!) on FIELD_DEFINITION
directive @isUser(idArg: String!) on FIELD_DEFINITION
directive @authenticated on FIELD_DEFINITION
directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

type Mutation {
		createUser(newUser: [NewUser!]!):  [User!]! @authenticated
    updateUser(userUpdate: [UpdateUser!]!): [User!]! @authenticated
		deleteUser(userDelete: [ID!]!): [ID!]! @authenticated
	# deleteUser(users: [ID!]!): Int @authenticated
	# deleteUser(userID: ID!): Boolean @CheckAuthorization(role: ADMIN)

    validate: User @authenticated
}

input NewUser{
    login: String!
    role: Roles!
}

input UpdateUser{
    id: ID!
    login: String!
    role: Roles!
}
