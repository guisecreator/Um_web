scalar DateTime

enum Roles {
    ADMIN
    USER
}

type User {
    id: ID!
    name: String!
    email: String!
    createAt: DateTime!
    updateAt: DateTime!
    deletedAt: DateTime
    role: Roles!
}

type AuthInfo{
    token: String!
}

type AuthPayload {
    user: User!
    info: AuthInfo!
}

#type AuthPayload {
#  token: String!
#  user: User!
#}

type SomeType {
  id: ID!
  name: String!
  age: Int
  email: String
}

type Query {
    me(login: String!): User @authenticated
    users: [User!] @authenticated
#    adminOnlyQuery: SomeType! @CheckAuthorization(role: "ADMIN")
    authenticatedQuery: SomeType! @authenticated
    userQuery(id: ID!): SomeType! @isUser(idArg: "id")
}

directive @CheckAuthorization(role: Roles!) on FIELD_DEFINITION
directive @isUser(idArg: String!) on FIELD_DEFINITION
directive @authenticated on FIELD_DEFINITION
directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

type Mutation {
    createUser(name: String!, email: String!): User!
    updateUser(users: [UpdateUser!]!): [User!]! @authenticated

#    deleteUser(userID: ID!): Boolean @CheckAuthorization(role: ADMIN)
    deleteUser(users: [ID!]!): [ID!]! @authenticated
    newUser(users: [NewUser!]!): [User!]! @authenticated

    signup(name: String!, email: String!, password: String!): AuthPayload!
    login(email: String!, password: String!): AuthPayload @goField(forceResolver: true)
    logout(login: String!): String @authenticated

    validate: User @authenticated
}

input NewUser{
    login: String!
    role: Roles!
}

input UpdateUser{
    id: ID!
    login: String!
    role: Roles!
}

schema {
  query: Query
  mutation: Mutation
}